import { useCallback, useMemo } from 'react';
import { useComponentContext, useMessageContext } from '../../../context';
export var useProcessReactions = function (params) {
    var propOwnReactions = params.own_reactions, propReactionCounts = params.reaction_counts, propReactionOptions = params.reactionOptions, propReactions = params.reactions;
    var message = useMessageContext('useProcessReactions').message;
    var contextReactionOptions = useComponentContext('useProcessReactions').reactionOptions;
    var reactionOptions = propReactionOptions !== null && propReactionOptions !== void 0 ? propReactionOptions : contextReactionOptions;
    var latestReactions = propReactions || message.latest_reactions || [];
    var ownReactions = propOwnReactions || (message === null || message === void 0 ? void 0 : message.own_reactions) || [];
    var reactionCounts = propReactionCounts || message.reaction_counts || {};
    var iHaveReactedWithReaction = useCallback(function (reactionType) { return ownReactions.find(function (reaction) { return reaction.type === reactionType; }); }, [ownReactions]);
    var getEmojiByReactionType = useCallback(function (reactionType) { return reactionOptions.find(function (_a) {
        var type = _a.type;
        return type === reactionType;
    }); }, [reactionOptions]);
    var latestReactionTypes = useMemo(function () {
        return latestReactions.reduce(function (reactionTypes, _a) {
            var type = _a.type;
            if (reactionTypes.indexOf(type) === -1) {
                reactionTypes.push(type);
            }
            return reactionTypes;
        }, []);
    }, [latestReactions]);
    var supportedReactionMap = useMemo(function () {
        return reactionOptions.reduce(function (map, _a) {
            var reactionType = _a.type;
            map[reactionType] = true;
            return map;
        }, {});
    }, [reactionOptions]);
    var supportedReactionsArePresent = useMemo(function () { return latestReactionTypes.some(function (reactionType) { return supportedReactionMap[reactionType]; }); }, [latestReactionTypes, supportedReactionMap]);
    var totalReactionCount = useMemo(function () {
        return supportedReactionsArePresent
            ? Object.values(reactionCounts).reduce(function (total, count) { return total + count; }, 0)
            : 0;
    }, [reactionCounts, supportedReactionsArePresent]);
    var aggregatedUserNamesByType = useMemo(function () {
        return latestReactions.reduce(function (typeMap, _a) {
            var _b;
            var type = _a.type, user = _a.user;
            (_b = typeMap[type]) !== null && _b !== void 0 ? _b : (typeMap[type] = []);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            typeMap[type].push((user === null || user === void 0 ? void 0 : user.name) || user.id);
            return typeMap;
        }, {});
    }, [latestReactions]);
    return {
        aggregatedUserNamesByType: aggregatedUserNamesByType,
        getEmojiByReactionType: getEmojiByReactionType,
        iHaveReactedWithReaction: iHaveReactedWithReaction,
        latestReactions: latestReactions,
        latestReactionTypes: latestReactionTypes,
        reactionCounts: reactionCounts,
        supportedReactionsArePresent: supportedReactionsArePresent,
        totalReactionCount: totalReactionCount,
    };
};
